diff --git a/src/org/apache/xml/security/algorithms/implementations/IntegrityHmac.java b/src/org/apache/xml/security/algorithms/implementations/IntegrityHmac.java
index 4fa1aaed..347518db 100644
--- a/src/org/apache/xml/security/algorithms/implementations/IntegrityHmac.java
+++ b/src/org/apache/xml/security/algorithms/implementations/IntegrityHmac.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2009 The Apache Software Foundation.
+ * Copyright  1999-2004 The Apache Software Foundation.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -16,6 +16,8 @@
  */
 package org.apache.xml.security.algorithms.implementations;
 
+
+
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.Key;
@@ -36,6 +38,7 @@ import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Text;
 
+
 /**
  *
  * @author $Author$
@@ -53,17 +56,11 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
     */
    public abstract String engineGetURI();
 
-   /**
-    * Returns the output length of the hash/digest.
-    */
-   abstract int getDigestLength();
-
    /** Field _macAlgorithm */
    private Mac _macAlgorithm = null;
 
    /** Field _HMACOutputLength */
    int _HMACOutputLength = 0;
-   private boolean _HMACOutputLengthSet = false;
 
    /**
     * Method IntegrityHmacSHA1das
@@ -99,9 +96,7 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
    }
 
    public void reset() {
-       _HMACOutputLength=0;
-       _HMACOutputLengthSet = false;
-       this._macAlgorithm.reset();
+	   _HMACOutputLength=0;
    }
 
    /**
@@ -116,18 +111,14 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
            throws XMLSignatureException {
 
       try {
-         if (this._HMACOutputLengthSet && this._HMACOutputLength < getDigestLength())
-{
-            if (log.isDebugEnabled()) {
-                log.debug("HMACOutputLength must not be less than " + getDigestLength());
-            }
-            Object[] exArgs = { String.valueOf(getDigestLength()) };
-            throw new XMLSignatureException
-                ("algorithms.HMACOutputLengthMin", exArgs);
-         } else {
-            byte[] completeResult = this._macAlgorithm.doFinal();
+         byte[] completeResult = this._macAlgorithm.doFinal();
+
+         if ((this._HMACOutputLength == 0) || (this._HMACOutputLength >= 160)) {
             return MessageDigestAlgorithm.isEqual(completeResult, signature);
          }
+         byte[] stripped = IntegrityHmac.reduceBitLength(completeResult,
+                                 this._HMACOutputLength);
+         return MessageDigestAlgorithm.isEqual(stripped, signature);         
       } catch (IllegalStateException ex) {
          throw new XMLSignatureException("empty", ex);
       }
@@ -181,16 +172,14 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
    protected byte[] engineSign() throws XMLSignatureException {
 
       try {
-         if (this._HMACOutputLengthSet && this._HMACOutputLength < getDigestLength()) {
-            if (log.isDebugEnabled()) {
-                log.debug("HMACOutputLength must not be less than " + getDigestLength());
-            }
-            Object[] exArgs = { String.valueOf(getDigestLength()) };
-            throw new XMLSignatureException
-                ("algorithms.HMACOutputLengthMin", exArgs);
-         } else {
-            return this._macAlgorithm.doFinal();
-         }
+         byte[] completeResult = this._macAlgorithm.doFinal();
+
+         if ((this._HMACOutputLength == 0) || (this._HMACOutputLength >= 160)) {
+            return completeResult;
+         } 
+          return IntegrityHmac.reduceBitLength(completeResult,
+                                                 this._HMACOutputLength);
+         
       } catch (IllegalStateException ex) {
          throw new XMLSignatureException("empty", ex);
       }
@@ -368,7 +357,6 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
     */
    protected void engineSetHMACOutputLength(int HMACOutputLength) {
       this._HMACOutputLength = HMACOutputLength;
-      this._HMACOutputLengthSet = true;
    }
 
    /**
@@ -384,13 +372,13 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
          throw new IllegalArgumentException("element null");
       }
 
-      Text hmaclength =XMLUtils.selectDsNodeText(element.getFirstChild(),
-         Constants._TAG_HMACOUTPUTLENGTH,0);               
+             Text hmaclength =XMLUtils.selectDsNodeText(element.getFirstChild(),
+                    Constants._TAG_HMACOUTPUTLENGTH,0);               
 
-      if (hmaclength != null) {
-         this._HMACOutputLength = Integer.parseInt(hmaclength.getData());
-         this._HMACOutputLengthSet = true;
-      }
+            if (hmaclength != null) {
+               this._HMACOutputLength = Integer.parseInt(hmaclength.getData());
+            }
+      
    }
 
    /**
@@ -398,13 +386,14 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
     *
     * @param element
     */
-   public void engineAddContextToElement(Element element) {
+   public void engineAddContextToElement(Element element)
+           {
 
       if (element == null) {
          throw new IllegalArgumentException("null element");
       }
 
-      if (this._HMACOutputLengthSet) {
+      if (this._HMACOutputLength != 0) {
          Document doc = element.getOwnerDocument();
          Element HMElem = XMLUtils.createElementInSignatureSpace(doc,
                              Constants._TAG_HMACOUTPUTLENGTH);
@@ -443,10 +432,6 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
       public String engineGetURI() {
          return XMLSignature.ALGO_ID_MAC_HMAC_SHA1;
       }
-
-      int getDigestLength() {
-          return 160;
-      }
    }
 
    /**
@@ -474,10 +459,6 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
       public String engineGetURI() {
          return XMLSignature.ALGO_ID_MAC_HMAC_SHA256;
       }
-
-      int getDigestLength() {
-          return 256;
-      }
    }
 
    /**
@@ -505,10 +486,6 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
       public String engineGetURI() {
          return XMLSignature.ALGO_ID_MAC_HMAC_SHA384;
       }
-
-      int getDigestLength() {
-          return 384;
-      }
    }
 
    /**
@@ -536,10 +513,6 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
       public String engineGetURI() {
          return XMLSignature.ALGO_ID_MAC_HMAC_SHA512;
       }
-
-      int getDigestLength() {
-          return 512;
-      }
    }
 
    /**
@@ -567,10 +540,6 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
       public String engineGetURI() {
          return XMLSignature.ALGO_ID_MAC_HMAC_RIPEMD160;
       }
-
-      int getDigestLength() {
-          return 160;
-      }
    }
 
    /**
@@ -598,9 +567,5 @@ public abstract class IntegrityHmac extends SignatureAlgorithmSpi {
       public String engineGetURI() {
          return XMLSignature.ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5;
       }
-
-      int getDigestLength() {
-          return 128;
-      }
    }
 }
diff --git a/src/org/apache/xml/security/resource/xmlsecurity_de.properties b/src/org/apache/xml/security/resource/xmlsecurity_de.properties
index 932656d1..c285aa0f 100644
--- a/src/org/apache/xml/security/resource/xmlsecurity_de.properties
+++ b/src/org/apache/xml/security/resource/xmlsecurity_de.properties
@@ -5,7 +5,6 @@ algorithm.extendsWrongClass = Kann URI {0} nicht f
 algorithms.CannotUseAlgorithmParameterSpecOnDSA = Sorry, but you cannot use a AlgorithmParameterSpec object for creating DSA signatures.
 algorithms.CannotUseAlgorithmParameterSpecOnRSA = Sorry, but you cannot use a AlgorithmParameterSpec object for creating RSA signatures.
 algorithms.CannotUseSecureRandomOnMAC = Sorry, but you cannot use a SecureRandom object for creating MACs.
-algorithms.HMACOutputLengthMin = HMACOutputLength must not be less than {0}
 algorithms.HMACOutputLengthOnlyForHMAC = A HMACOutputLength can only be specified for HMAC integrity algorithms
 algorithms.NoSuchAlgorithm = Der Algorithmus {0} ist nicht verfügbar. Original Nachricht war: {1}
 algorithms.NoSuchMap = The algorithm URI "{0}" could not be mapped to a JCE algorithm
diff --git a/src/org/apache/xml/security/resource/xmlsecurity_en.properties b/src/org/apache/xml/security/resource/xmlsecurity_en.properties
index 3b75ffd8..6ea92bfa 100644
--- a/src/org/apache/xml/security/resource/xmlsecurity_en.properties
+++ b/src/org/apache/xml/security/resource/xmlsecurity_en.properties
@@ -5,7 +5,6 @@ algorithm.extendsWrongClass = Cannot register URI {0} to class {1} because it do
 algorithms.CannotUseAlgorithmParameterSpecOnDSA = Sorry, but you cannot use a AlgorithmParameterSpec object for creating DSA signatures.
 algorithms.CannotUseAlgorithmParameterSpecOnRSA = Sorry, but you cannot use a AlgorithmParameterSpec object for creating RSA signatures.
 algorithms.CannotUseSecureRandomOnMAC = Sorry, but you cannot use a SecureRandom object for creating MACs.
-algorithms.HMACOutputLengthMin = HMACOutputLength must not be less than {0}
 algorithms.HMACOutputLengthOnlyForHMAC = A HMACOutputLength can only be specified for HMAC integrity algorithms
 algorithms.NoSuchAlgorithm = The requested algorithm {0} does not exist. Original Message was: {1}
 algorithms.NoSuchMap = The algorithm URI "{0}" could not be mapped to a JCE algorithm
diff --git a/src/org/apache/xml/security/signature/XMLSignature.java b/src/org/apache/xml/security/signature/XMLSignature.java
index 60fadb4b..43bd8dd6 100644
--- a/src/org/apache/xml/security/signature/XMLSignature.java
+++ b/src/org/apache/xml/security/signature/XMLSignature.java
@@ -513,8 +513,6 @@ public final class XMLSignature extends SignatureElementProxy {
 
             // set them on the SignatureValue element
             this.setSignatureValueElement(sa.sign());
-        } catch (XMLSignatureException ex) {
-            throw ex;
         } catch (CanonicalizationException ex) {
             throw new XMLSignatureException("empty", ex);
         } catch (InvalidCanonicalizerException ex) {
@@ -628,8 +626,6 @@ public final class XMLSignature extends SignatureElementProxy {
             }
 
             return si.verify(this._followManifestsDuringValidation);
-        } catch (XMLSignatureException ex) {
-            throw ex;
         } catch (XMLSecurityException ex) {
             throw new XMLSignatureException("empty", ex);
         } 
diff --git a/src/org/jcp/xml/dsig/internal/dom/DOMHMACSignatureMethod.java b/src/org/jcp/xml/dsig/internal/dom/DOMHMACSignatureMethod.java
index 9c5a586a..24df32d9 100644
--- a/src/org/jcp/xml/dsig/internal/dom/DOMHMACSignatureMethod.java
+++ b/src/org/jcp/xml/dsig/internal/dom/DOMHMACSignatureMethod.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2005-2009 The Apache Software Foundation.
+ * Copyright 2005 The Apache Software Foundation.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -54,7 +54,6 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
 	Logger.getLogger("org.jcp.xml.dsig.internal.dom");
     private Mac hmac;
     private int outputLength;
-    private boolean outputLengthSet;
 
     /**
      * Creates a <code>DOMHMACSignatureMethod</code> with the specified params 
@@ -84,12 +83,13 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
 	            ("params must be of type HMACParameterSpec");
 	    }
 	    outputLength = ((HMACParameterSpec) params).getOutputLength();
-            outputLengthSet = true;
 	    if (log.isLoggable(Level.FINE)) {
 	        log.log(Level.FINE, 
 		    "Setting outputLength from HMACParameterSpec to: "
 		    + outputLength);
 	    }
+        } else {
+	    outputLength = -1;
         }
     }
 
@@ -97,7 +97,6 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
 	throws MarshalException {
         outputLength = new Integer
 	    (paramsElem.getFirstChild().getNodeValue()).intValue();
-        outputLengthSet = true;
         if (log.isLoggable(Level.FINE)) {
             log.log(Level.FINE, "unmarshalled outputLength: " + outputLength);
 	}
@@ -132,13 +131,23 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
                 throw new XMLSignatureException(nsae);
             }
         }
-        if (outputLengthSet && outputLength < getDigestLength()) {
-            throw new XMLSignatureException
-                ("HMACOutputLength must not be less than " + getDigestLength());
+        if (log.isLoggable(Level.FINE)) {
+            log.log(Level.FINE, "outputLength = " + outputLength);
         }
         hmac.init((SecretKey) key);
         si.canonicalize(context, new MacOutputStream(hmac));
         byte[] result = hmac.doFinal();
+        if (log.isLoggable(Level.FINE)) {
+            log.log(Level.FINE, "resultLength = " + result.length);
+        }
+        if (outputLength != -1) {
+            int byteLength = outputLength/8;
+            if (result.length > byteLength) {
+                byte[] truncated = new byte[byteLength];
+                System.arraycopy(result, 0, truncated, 0, byteLength);
+                result = truncated;
+            }
+        }
 
         return MessageDigest.isEqual(sig, result);
     }
@@ -158,13 +167,18 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
                 throw new XMLSignatureException(nsae);
             }
         }
-        if (outputLengthSet && outputLength < getDigestLength()) {
-            throw new XMLSignatureException
-                ("HMACOutputLength must not be less than " + getDigestLength());
-        }
         hmac.init((SecretKey) key);
         si.canonicalize(context, new MacOutputStream(hmac));
-        return hmac.doFinal();
+        byte[] result = hmac.doFinal();
+        if (outputLength != -1) {
+            int byteLength = outputLength/8;
+            if (result.length > byteLength) {
+                byte[] truncated = new byte[byteLength];
+                System.arraycopy(result, 0, truncated, 0, byteLength);
+                result = truncated;
+            }
+        }
+        return result;
     }
 
     boolean paramsEqual(AlgorithmParameterSpec spec) {
@@ -179,11 +193,6 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
 	return (outputLength == ospec.getOutputLength());
     }
 
-    /**
-     * Returns the output length of the hash/digest.
-     */
-    abstract int getDigestLength();
-
     static final class SHA1 extends DOMHMACSignatureMethod {
         SHA1(AlgorithmParameterSpec params)
             throws InvalidAlgorithmParameterException {
@@ -198,9 +207,6 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
         String getSignatureAlgorithm() {
             return "HmacSHA1";
         }
-        int getDigestLength() {
-            return 160;
-        }
     }
 
     static final class SHA256 extends DOMHMACSignatureMethod {
@@ -217,9 +223,6 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
         String getSignatureAlgorithm() {
             return "HmacSHA256";
         }
-        int getDigestLength() {
-            return 256;
-        }
     }
 
     static final class SHA384 extends DOMHMACSignatureMethod {
@@ -236,9 +239,6 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
         String getSignatureAlgorithm() {
             return "HmacSHA384";
         }
-        int getDigestLength() {
-            return 384;
-        }
     }
 
     static final class SHA512 extends DOMHMACSignatureMethod {
@@ -255,8 +255,5 @@ public abstract class DOMHMACSignatureMethod extends DOMSignatureMethod {
         String getSignatureAlgorithm() {
             return "HmacSHA512";
         }
-        int getDigestLength() {
-            return 512;
-        }
     }
 }
