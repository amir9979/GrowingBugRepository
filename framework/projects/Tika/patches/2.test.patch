diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java
index f94f7a4a5..7eab68fe5 100644
--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java
+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java
@@ -20,50 +20,6 @@ import junit.framework.TestCase;
 
 public class MimeTypeTest extends TestCase {
 
-    private MimeTypes types;
-    private MimeType text;
-
-    protected void setUp() throws MimeTypeException {
-        types = new MimeTypes();
-        text = types.forName("text/plain");
-    }
-
-    /** Test MimeType constructor */
-    public void testConstrctor() {
-
-        // Missing registry
-        try {
-            new MimeType(null, "text/plain");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-
-        // Missing name
-        try {
-            new MimeType(types, null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-
-        // Invalid name (no slash)
-        try {
-            new MimeType(types, "application");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-
-        // Invalid name (not lower case)
-        try {
-            new MimeType(types, "TEXT/PLAIN");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-
     public void testIsValidName() {
         assertTrue(MimeType.isValid("application/octet-stream"));
         assertTrue(MimeType.isValid("text/plain"));
@@ -79,32 +35,6 @@ public class MimeTypeTest extends TestCase {
         assertFalse(MimeType.isValid("application/\u00f6ctet-stream"));
         assertFalse(MimeType.isValid("text/plain;"));
         assertFalse(MimeType.isValid("text/plain; charset=UTF-8"));
-        try {
-            MimeType.isValid(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-
-    /** Test MimeType setDescription() */
-    public void testSetDescription() {
-        try {
-            text.setDescription(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-
-    /** Test MimeType setSuperType() */
-    public void testSetSuperType() throws MimeTypeException {
-        try {
-            text.setSuperType(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
     }
 
 }
diff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java
index 1270a1bf6..ef95d40cc 100644
--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java
+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java
@@ -16,8 +16,6 @@
  */
 package org.apache.tika.mime;
 
-import java.io.IOException;
-import java.io.InputStream;
 import junit.framework.TestCase;
 
 public class MimeTypesTest extends TestCase {
@@ -92,13 +90,6 @@ public class MimeTypesTest extends TestCase {
 
         assertTrue(html.isDescendantOf(text));
         assertFalse(text.isDescendantOf(html));
-
-        try {
-            binary.isDescendantOf(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
     }
 
     public void testCompareTo() {
@@ -113,33 +104,6 @@ public class MimeTypesTest extends TestCase {
         assertTrue(html.compareTo(binary) > 0);
         assertTrue(html.compareTo(text) > 0);
         assertTrue(html.compareTo(html) == 0);
-
-        try {
-            binary.compareTo(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-
-    /** Test getMimeType(byte[]) */
-    public void testGetMimeType_byteArray() {
-        try {
-            types.getMimeType((byte[])null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-
-    /** Test getMimeType(InputStream) */
-    public void testGetMimeType_InputStream() throws IOException {
-        try {
-            types.getMimeType((InputStream)null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
     }
 
 }
diff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java
deleted file mode 100644
index bba32fdf9..000000000
--- a/src/test/java/org/apache/tika/mime/PatternsTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.mime;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-import junit.framework.TestCase;
-
-/**
- * Test case for {@link Patterns}.
- *
- * @version $Id$
- */
-public class PatternsTest extends TestCase {
-
-    private Patterns patterns;
-    private MimeTypes types;
-    private MimeType text;
-
-    protected void setUp() throws MimeTypeException {
-        patterns = new Patterns();
-        types = new MimeTypes();
-        text = types.forName("text/plain");
-    }
-
-    /** Test add() */
-    public void testAdd() throws MimeTypeException {
-        try {
-            patterns.add(null, text);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-        try {
-            patterns.add("", null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-        try {
-            patterns.add(null, null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-
-    /** Test matches() */
-    public void testMatches() {
-        try {
-            patterns.matches(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // expected result
-        }
-    }
-}
