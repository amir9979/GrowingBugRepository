diff --git a/src/test/java/org/apache/commons/pool2/Waiter.java b/src/test/java/org/apache/commons/pool2/Waiter.java
index 1c310a63..56c0e4bb 100644
--- a/src/test/java/org/apache/commons/pool2/Waiter.java
+++ b/src/test/java/org/apache/commons/pool2/Waiter.java
@@ -33,8 +33,6 @@ public class Waiter {
     private long latency = 0;
     private long lastPassivated = 0;
     private long lastIdleTimeMs = 0;
-    private long passivationCount = 0;
-    private long validationCount = 0;
     private final int id = instanceCount.getAndIncrement();
 
     public Waiter(boolean active, boolean valid, long latency) {
@@ -91,7 +89,6 @@ public class Waiter {
             lastIdleTimeMs = currentTime - lastPassivated;
         } else {       // passivating
             lastPassivated = currentTime;
-            passivationCount++;
         }
     }
 
@@ -104,7 +101,6 @@ public class Waiter {
     }
 
     public boolean isValid() {
-        validationCount++;
         return valid;
     }
 
@@ -136,20 +132,6 @@ public class Waiter {
     public long getLastIdleTimeMs() {
         return lastIdleTimeMs;
     }
-    
-    /**
-     * @return how many times this instance has been validated
-     */
-    public long getValidationCount() {
-        return validationCount;
-    }
-    
-    /**
-     * @return how many times this instance has been passivated
-     */
-    public long getPassivationCount() {
-        return passivationCount;
-    }
 
     @Override
     public int hashCode() {
diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
index 97279b9f..07485e55 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
@@ -2220,32 +2220,6 @@ public class TestGenericKeyedObjectPool extends TestKeyedObjectPool {
         pool.returnObject("a", s2);
         pool.close();
     }
-    
-    /**
-     * Verifies that returning an object twice (without borrow in between) causes ISE
-     * but does not re-validate or re-passivate the instance.
-     * 
-     * JIRA: POOL-285
-     */
-    @Test
-    public void testMultipleReturn() throws Exception {
-        final WaiterFactory<String> factory = new WaiterFactory<String>(0, 0, 0, 0, 0, 0);
-        final GenericKeyedObjectPool<String, Waiter> pool =
-                new GenericKeyedObjectPool<String, Waiter>(factory);
-        pool.setTestOnReturn(true);
-        Waiter waiter = pool.borrowObject("a");
-        pool.returnObject("a",waiter);
-        Assert.assertEquals(1, waiter.getValidationCount());
-        Assert.assertEquals(1, waiter.getPassivationCount());
-        try {
-            pool.returnObject("a",waiter);
-            fail("Expecting IllegalStateException from multiple return");
-        } catch (IllegalStateException ex) {
-            // Exception is expected, now check no repeat validation/passivation
-            Assert.assertEquals(1, waiter.getValidationCount());
-            Assert.assertEquals(1, waiter.getPassivationCount());
-        }
-    }
 
     private static class DummyFactory
             extends BaseKeyedPooledObjectFactory<Object,Object> {
diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
index d569a366..b21ab5cb 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
@@ -47,8 +47,6 @@ import org.apache.commons.pool2.SwallowedExceptionListener;
 import org.apache.commons.pool2.TestBaseObjectPool;
 import org.apache.commons.pool2.VisitTracker;
 import org.apache.commons.pool2.VisitTrackerFactory;
-import org.apache.commons.pool2.Waiter;
-import org.apache.commons.pool2.WaiterFactory;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -2439,31 +2437,6 @@ public class TestGenericObjectPool extends TestBaseObjectPool {
         pool.returnObject(s2);
         pool.close();
     }
-    
-    /**
-     * Verifies that returning an object twice (without borrow in between) causes ISE
-     * but does not re-validate or re-passivate the instance.
-     * 
-     * JIRA: POOL-285
-     */
-    @Test
-    public void testMultipleReturn() throws Exception {
-        final WaiterFactory<String> factory = new WaiterFactory<String>(0, 0, 0, 0, 0, 0);
-        final GenericObjectPool<Waiter> pool = new GenericObjectPool<Waiter>(factory);
-        pool.setTestOnReturn(true);
-        Waiter waiter = pool.borrowObject();
-        pool.returnObject(waiter);
-        Assert.assertEquals(1, waiter.getValidationCount());
-        Assert.assertEquals(1, waiter.getPassivationCount());
-        try {
-            pool.returnObject(waiter);
-            fail("Expecting IllegalStateException from multiple return");
-        } catch (IllegalStateException ex) {
-            // Exception is expected, now check no repeat validation/passivation
-            Assert.assertEquals(1, waiter.getValidationCount());
-            Assert.assertEquals(1, waiter.getPassivationCount());
-        }
-    }
 
     private static final class DummyFactory
             extends BasePooledObjectFactory<Object> {
