diff --git a/src/main/java/org/apache/commons/pool2/impl/BaseGenericObjectPool.java b/src/main/java/org/apache/commons/pool2/impl/BaseGenericObjectPool.java
index bd3e80b4..d9a4df77 100644
--- a/src/main/java/org/apache/commons/pool2/impl/BaseGenericObjectPool.java
+++ b/src/main/java/org/apache/commons/pool2/impl/BaseGenericObjectPool.java
@@ -26,7 +26,6 @@ import java.util.Arrays;
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.TimerTask;
-import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
@@ -1027,10 +1026,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      *
      * @see GenericKeyedObjectPool#setTimeBetweenEvictionRunsMillis
      */
-    class Evictor implements Runnable {
-
-        private ScheduledFuture<?> scheduledFuture;
-
+    class Evictor extends TimerTask {
         /**
          * Run pool maintenance.  Evict objects qualifying for eviction and then
          * ensure that the minimum number of idle instances are available.
@@ -1078,16 +1074,6 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
                 Thread.currentThread().setContextClassLoader(savedClassLoader);
             }
         }
-
-
-        void setScheduledFuture(ScheduledFuture<?> scheduledFuture) {
-            this.scheduledFuture = scheduledFuture;
-        }
-
-
-        void cancel() {
-            scheduledFuture.cancel(false);
-        }
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java b/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java
index bc0a5ffb..0b5e3acc 100644
--- a/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java
+++ b/src/main/java/org/apache/commons/pool2/impl/EvictionTimer.java
@@ -19,7 +19,6 @@ package org.apache.commons.pool2.impl;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.TimerTask;
-import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
@@ -45,6 +44,9 @@ class EvictionTimer {
     /** Executor instance */
     private static ScheduledThreadPoolExecutor executor; //@GuardedBy("EvictionTimer.class")
 
+    /** Static usage count tracker */
+    private static int usageCount; //@GuardedBy("EvictionTimer.class")
+
     /** Prevent instantiation */
     private EvictionTimer() {
         // Hide the default constructor
@@ -71,15 +73,12 @@ class EvictionTimer {
      * @param delay     Delay in milliseconds before task is executed
      * @param period    Time in milliseconds between executions
      */
-    static synchronized void schedule(
-            final BaseGenericObjectPool<?>.Evictor task, final long delay, final long period) {
+    static synchronized void schedule(final Runnable task, final long delay, final long period) {
         if (null == executor) {
             executor = new ScheduledThreadPoolExecutor(1, new EvictorThreadFactory());
-            executor.setRemoveOnCancelPolicy(true);
         }
-        ScheduledFuture<?> scheduledFuture =
-                executor.scheduleWithFixedDelay(task, delay, period, TimeUnit.MILLISECONDS);
-        task.setScheduledFuture(scheduledFuture);
+        usageCount++;
+        executor.scheduleWithFixedDelay(task, delay, period, TimeUnit.MILLISECONDS);
     }
 
     /**
@@ -91,10 +90,10 @@ class EvictionTimer {
      *                  terminate?
      * @param unit      The units for the specified timeout
      */
-    static synchronized void cancel(
-            final BaseGenericObjectPool<?>.Evictor task, final long timeout, final TimeUnit unit) {
+    static synchronized void cancel(final TimerTask task, final long timeout, final TimeUnit unit) {
         task.cancel();
-        if (executor.getQueue().size() == 0) {
+        usageCount--;
+        if (usageCount == 0) {
             executor.shutdown();
             try {
                 executor.awaitTermination(timeout, unit);
