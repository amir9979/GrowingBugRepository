diff --git a/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java b/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java
index d477cfa9..dcfe448c 100644
--- a/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java
+++ b/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java
@@ -1017,58 +1017,26 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
             }
         }
 
-        // Flag that indicates if create should:
-        // - TRUE:  call the factory to create an object
-        // - FALSE: return null
-        // - null:  loop and re-test the condition that determines whether to
-        //          call the factory
-        Boolean create = null;
-        while (create == null) {
-            synchronized (objectDeque.makeObjectCountLock) {
-                final long newCreateCount = objectDeque.getCreateCount().incrementAndGet();
-                // Check against the per key limit
-                if (newCreateCount > maxTotalPerKeySave) {
-                    // The key is currently at capacity or in the process of
-                    // making enough new objects to take it to capacity.
-                    numTotal.decrementAndGet();
-                    objectDeque.getCreateCount().decrementAndGet();
-                    if (objectDeque.makeObjectCount == 0) {
-                        // There are no makeObject() calls in progress for this
-                        // key so the key is at capacity. Do not attempt to
-                        // create a new object. Return and wait for an object to
-                        // be returned.
-                        create = Boolean.FALSE;
-                    } else {
-                        // There are makeObject() calls in progress that might
-                        // bring the pool to capacity. Those calls might also
-                        // fail so wait until they complete and then re-test if
-                        // the pool is at capacity or not.
-                        objectDeque.makeObjectCountLock.wait();
-                    }
-                } else {
-                    // The pool is not at capacity. Create a new object.
-                    objectDeque.makeObjectCount++;
-                    create = Boolean.TRUE;
-                }
-            }
-        }
+        final long newCreateCount = objectDeque.getCreateCount().incrementAndGet();
 
-        if (!create.booleanValue()) {
+        // Check against the per key limit
+        if (newCreateCount > maxTotalPerKeySave) {
+            numTotal.decrementAndGet();
+            objectDeque.getCreateCount().decrementAndGet();
             return null;
         }
 
+
         PooledObject<T> p = null;
         try {
             p = factory.makeObject(key);
         } catch (final Exception e) {
             numTotal.decrementAndGet();
             objectDeque.getCreateCount().decrementAndGet();
+            // POOL-303. There may be threads waiting on an object return that
+            // isn't going to happen. Unblock them.
+            objectDeque.idleObjects.interuptTakeWaiters();
             throw e;
-        } finally {
-            synchronized (objectDeque.makeObjectCountLock) {
-                objectDeque.makeObjectCount--;
-                objectDeque.makeObjectCountLock.notifyAll();
-            }
         }
 
         createdCount.incrementAndGet();
@@ -1463,9 +1431,6 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
          */
         private final AtomicInteger createCount = new AtomicInteger(0);
 
-        private long makeObjectCount = 0;
-        private final Object makeObjectCountLock = new Object();
-
         /*
          * The map is keyed on pooled instances, wrapped to ensure that
          * they work properly as keys.
diff --git a/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java b/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java
index 487eec2c..0e0c9bdb 100644
--- a/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java
+++ b/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java
@@ -842,59 +842,24 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
      */
     private PooledObject<T> create() throws Exception {
         int localMaxTotal = getMaxTotal();
-        // This simplifies the code later in this method
         if (localMaxTotal < 0) {
             localMaxTotal = Integer.MAX_VALUE;
         }
-
-        // Flag that indicates if create should:
-        // - TRUE:  call the factory to create an object
-        // - FALSE: return null
-        // - null:  loop and re-test the condition that determines whether to
-        //          call the factory
-        Boolean create = null;
-        while (create == null) {
-            synchronized (makeObjectCountLock) {
-                final long newCreateCount = createCount.incrementAndGet();
-                if (newCreateCount > localMaxTotal) {
-                    // The pool is currently at capacity or in the process of
-                    // making enough new objects to take it to capacity.
-                    createCount.decrementAndGet();
-                    if (makeObjectCount == 0) {
-                        // There are no makeObject() calls in progress so the
-                        // pool is at capacity. Do not attempt to create a new
-                        // object. Return and wait for an object to be returned
-                        create = Boolean.FALSE;
-                    } else {
-                        // There are makeObject() calls in progress that might
-                        // bring the pool to capacity. Those calls might also
-                        // fail so wait until they complete and then re-test if
-                        // the pool is at capacity or not.
-                        makeObjectCountLock.wait();
-                    }
-                } else {
-                    // The pool is not at capacity. Create a new object.
-                    makeObjectCount++;
-                    create = Boolean.TRUE;
-                }
-            }
-        }
-
-        if (!create.booleanValue()) {
+        final long newCreateCount = createCount.incrementAndGet();
+        if (newCreateCount > localMaxTotal) {
+            createCount.decrementAndGet();
             return null;
         }
 
         final PooledObject<T> p;
         try {
             p = factory.makeObject();
-        } catch (Exception e) {
+        } catch (final Exception e) {
             createCount.decrementAndGet();
+            // POOL-303. There may be threads waiting on an object return that
+            // isn't going to happen. Unblock them.
+            idleObjects.interuptTakeWaiters();
             throw e;
-        } finally {
-            synchronized (makeObjectCountLock) {
-                makeObjectCount--;
-                makeObjectCountLock.notifyAll();
-            }
         }
 
         final AbandonedConfig ac = this.abandonedConfig;
@@ -1164,8 +1129,6 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
      * {@link #_maxActive} objects created at any one time.
      */
     private final AtomicLong createCount = new AtomicLong(0);
-    private long makeObjectCount = 0;
-    private final Object makeObjectCountLock = new Object();
     private final LinkedBlockingDeque<PooledObject<T>> idleObjects;
 
     // JMX specific attributes
