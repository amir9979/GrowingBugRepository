diff --git a/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java b/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java
index 28a0ad52..e7374554 100644
--- a/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java
+++ b/src/main/java/org/apache/commons/pool2/impl/GenericObjectPool.java
@@ -561,11 +561,6 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
                     swallowException(e);
                 }
                 updateStatsReturn(activeTime);
-                try {
-                    ensureIdle(1, false);
-                } catch (Exception e) {
-                    swallowException(e);
-                }
                 return;
             }
         }
@@ -579,11 +574,6 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
             } catch (Exception e) {
                 swallowException(e);
             }
-            try {
-                ensureIdle(1, false);
-            } catch (Exception e) {
-                swallowException(e);
-            }
             updateStatsReturn(activeTime);
             return;
         }
@@ -636,7 +626,6 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
                 destroy(p);
             }
         }
-        ensureIdle(1, false);
     }
 
     /**
@@ -868,27 +857,12 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
 
     @Override
     void ensureMinIdle() throws Exception {
-        ensureIdle(getMinIdle(), true);
-    }
-    
-    /**
-     * Tries to ensure that {@code idleCount} idle instances exist in the pool.
-     * <p>
-     * Creates and adds idle instances until either {@link #getNumIdle()} reaches {@code idleCount}
-     * or the total number of objects (idle, checked out, or being created) reaches
-     * {@link #getMaxTotal()}. If {@code always} is false, no instances are created unless
-     * there are threads waiting to check out instances from the pool.
-     * 
-     * @param idleCount the number of idle instances desired
-     * @param always true means create instances even if the pool has no threads waiting
-     * @throws Exception if the factory's makeObject throws
-     */
-    private void ensureIdle(int idleCount, boolean always) throws Exception {
-        if (idleCount < 1 || isClosed() || (!always && !idleObjects.hasTakeWaiters())) {
+        int minIdleSave = getMinIdle();
+        if (minIdleSave < 1) {
             return;
         }
 
-        while (idleObjects.size() < idleCount) {
+        while (idleObjects.size() < minIdleSave) {
             PooledObject<T> p = create();
             if (p == null) {
                 // Can't create objects, no reason to think another call to
